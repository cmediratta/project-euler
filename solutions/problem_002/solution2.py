#!/usr/bin/env python3
"""
Problem:
Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
"""

"""
Solution Reasoning:

Fibonacci numbers are relatively easy to calculate using recursion, and the
numbers that this problem requires are nowhere near memory issue levels.

"""

def even_fibonacci_sums(last, current):
    if(current>4000000):
        return(0)
    else:
        if current%2==1: #Two times as many odd fibonacci numbers as even
            return even_fibonacci_sums(current, current + last)

        else:
            return even_fibonacci_sums(current, current + last) + current


print(even_fibonacci_sums(1,2))
